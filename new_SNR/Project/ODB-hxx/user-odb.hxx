// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef USER_ODB_HXX
#define USER_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/mysql/qstring-traits.hxx>
#include <odb/qt/basic/mysql/qbyte-array-traits.hxx>
#include <odb/qt/basic/mysql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/mysql/qdate-traits.hxx>
#include <odb/qt/date-time/mysql/qtime-traits.hxx>
#include <odb/qt/date-time/mysql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "user.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // user
  //
  template <>
  struct class_traits< ::user >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::user >
  {
    public:
    typedef ::user object_type;
    typedef ::QSharedPointer< ::user > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // user
  //
  template <typename A>
  struct query_columns< ::user, id_mysql, A >
  {
    // user_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    user_id_type_;

    static const user_id_type_ user_id;

    // user_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    user_name_type_;

    static const user_name_type_ user_name;

    // password
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    password_type_;

    static const password_type_ password;

    // first_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    first_name_type_;

    static const first_name_type_ first_name;

    // last_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    last_name_type_;

    static const last_name_type_ last_name;

    // email
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    email_type_;

    static const email_type_ email;

    // type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::type,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    type_type_;

    static const type_type_ type;

    // registration_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QDateTime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    registration_date_type_;

    static const registration_date_type_ registration_date;
  };

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::user_id_type_
  query_columns< ::user, id_mysql, A >::
  user_id (A::table_name, "`user_id`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::user_name_type_
  query_columns< ::user, id_mysql, A >::
  user_name (A::table_name, "`user_name`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::password_type_
  query_columns< ::user, id_mysql, A >::
  password (A::table_name, "`password`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::first_name_type_
  query_columns< ::user, id_mysql, A >::
  first_name (A::table_name, "`first_name`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::last_name_type_
  query_columns< ::user, id_mysql, A >::
  last_name (A::table_name, "`last_name`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::email_type_
  query_columns< ::user, id_mysql, A >::
  email (A::table_name, "`email`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::type_type_
  query_columns< ::user, id_mysql, A >::
  type (A::table_name, "`type`", 0);

  template <typename A>
  const typename query_columns< ::user, id_mysql, A >::registration_date_type_
  query_columns< ::user, id_mysql, A >::
  registration_date (A::table_name, "`registration_date`", 0);

  template <typename A>
  struct pointer_query_columns< ::user, id_mysql, A >:
    query_columns< ::user, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::user, id_mysql >:
    public access::object_traits< ::user >
  {
    public:
    struct id_image_type
    {
      unsigned int id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // user_id
      //
      unsigned int user_id_value;
      my_bool user_id_null;

      // user_name
      //
      details::buffer user_name_value;
      unsigned long user_name_size;
      my_bool user_name_null;

      // password
      //
      details::buffer password_value;
      unsigned long password_size;
      my_bool password_null;

      // first_name
      //
      details::buffer first_name_value;
      unsigned long first_name_size;
      my_bool first_name_null;

      // last_name
      //
      details::buffer last_name_value;
      unsigned long last_name_size;
      my_bool last_name_null;

      // email
      //
      details::buffer email_value;
      unsigned long email_size;
      my_bool email_null;

      // type_
      //
      mysql::value_traits< ::type, mysql::id_enum >::image_type type_value;
      unsigned long type_size;
      my_bool type_null;

      // registration_date
      //
      MYSQL_TIME registration_date_value;
      my_bool registration_date_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // images_
    //
    struct images_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::QLazyWeakPointer< ::image > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< images_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned int value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // tracks_
    //
    struct tracks_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::QLazyWeakPointer< ::track > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< tracks_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned int value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::user, id_common >:
    public access::object_traits_impl< ::user, id_mysql >
  {
  };

  // user
  //
}

#include "user-odb.ixx"

#include <odb/post.hxx>

#endif // USER_ODB_HXX
