// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef IMAGE_ODB_HXX
#define IMAGE_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/mysql/qstring-traits.hxx>
#include <odb/qt/basic/mysql/qbyte-array-traits.hxx>
#include <odb/qt/basic/mysql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/mysql/qdate-traits.hxx>
#include <odb/qt/date-time/mysql/qtime-traits.hxx>
#include <odb/qt/date-time/mysql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "image.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // image
  //
  template <>
  struct class_traits< ::image >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::image >
  {
    public:
    typedef ::image object_type;
    typedef ::QSharedPointer< ::image > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // image
  //
  template <typename A>
  struct pointer_query_columns< ::image, id_mysql, A >
  {
    // image_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    image_id_type_;

    static const image_id_type_ image_id;

    // PATH
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    PATH_type_;

    static const PATH_type_ PATH;

    // event_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    event_id_type_;

    static const event_id_type_ event_id;

    // user_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    user_id_type_;

    static const user_id_type_ user_id;

    // image_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QDateTime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    image_date_type_;

    static const image_date_type_ image_date;

    // image_accepted
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    image_accepted_type_;

    static const image_accepted_type_ image_accepted;

    // image_longitude
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    image_longitude_type_;

    static const image_longitude_type_ image_longitude;

    // image_latitude
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    image_latitude_type_;

    static const image_latitude_type_ image_latitude;

    // blob
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QByteArray,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    blob_type_;

    static const blob_type_ blob;
  };

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::image_id_type_
  pointer_query_columns< ::image, id_mysql, A >::
  image_id (A::table_name, "`image_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::PATH_type_
  pointer_query_columns< ::image, id_mysql, A >::
  PATH (A::table_name, "`PATH`", 0);

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::event_id_type_
  pointer_query_columns< ::image, id_mysql, A >::
  event_id (A::table_name, "`event_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::user_id_type_
  pointer_query_columns< ::image, id_mysql, A >::
  user_id (A::table_name, "`user_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::image_date_type_
  pointer_query_columns< ::image, id_mysql, A >::
  image_date (A::table_name, "`image_date`", 0);

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::image_accepted_type_
  pointer_query_columns< ::image, id_mysql, A >::
  image_accepted (A::table_name, "`image_accepted`", 0);

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::image_longitude_type_
  pointer_query_columns< ::image, id_mysql, A >::
  image_longitude (A::table_name, "`image_longitude`", 0);

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::image_latitude_type_
  pointer_query_columns< ::image, id_mysql, A >::
  image_latitude (A::table_name, "`image_latitude`", 0);

  template <typename A>
  const typename pointer_query_columns< ::image, id_mysql, A >::blob_type_
  pointer_query_columns< ::image, id_mysql, A >::
  blob (A::table_name, "`blob`", 0);

  template <>
  class access::object_traits_impl< ::image, id_mysql >:
    public access::object_traits< ::image >
  {
    public:
    struct id_image_type
    {
      unsigned int id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // image_id
      //
      unsigned int image_id_value;
      my_bool image_id_null;

      // PATH
      //
      details::buffer PATH_value;
      unsigned long PATH_size;
      my_bool PATH_null;

      // event_id
      //
      unsigned int event_id_value;
      my_bool event_id_null;

      // user_id
      //
      unsigned int user_id_value;
      my_bool user_id_null;

      // image_date
      //
      MYSQL_TIME image_date_value;
      my_bool image_date_null;

      // image_accepted
      //
      signed char image_accepted_value;
      my_bool image_accepted_null;

      // image_longitude
      //
      double image_longitude_value;
      my_bool image_longitude_null;

      // image_latitude
      //
      double image_latitude_value;
      my_bool image_latitude_null;

      // blob
      //
      details::buffer blob_value;
      unsigned long blob_size;
      my_bool blob_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct event_id_tag;
    struct user_id_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::image, id_common >:
    public access::object_traits_impl< ::image, id_mysql >
  {
  };

  // image
  //
  template <>
  struct alias_traits<
    ::odbevent,
    id_mysql,
    access::object_traits_impl< ::image, id_mysql >::event_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::user,
    id_mysql,
    access::object_traits_impl< ::image, id_mysql >::user_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::image, id_mysql >
  {
    // event_id
    //
    typedef
    odb::alias_traits<
      ::odbevent,
      id_mysql,
      access::object_traits_impl< ::image, id_mysql >::event_id_tag>
    event_id_alias_;

    // user_id
    //
    typedef
    odb::alias_traits<
      ::user,
      id_mysql,
      access::object_traits_impl< ::image, id_mysql >::user_id_tag>
    user_id_alias_;
  };

  template <typename A>
  struct query_columns< ::image, id_mysql, A >:
    query_columns_base< ::image, id_mysql >
  {
    // image_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    image_id_type_;

    static const image_id_type_ image_id;

    // PATH
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    PATH_type_;

    static const PATH_type_ PATH;

    // event_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    event_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::odbevent,
        id_mysql,
        event_id_alias_ > >
    event_id_pointer_type_;

    struct event_id_type_: event_id_pointer_type_, event_id_column_type_
    {
      event_id_type_ (const char* t, const char* c, const char* conv)
        : event_id_column_type_ (t, c, conv)
      {
      }
    };

    static const event_id_type_ event_id;

    // user_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    user_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::user,
        id_mysql,
        user_id_alias_ > >
    user_id_pointer_type_;

    struct user_id_type_: user_id_pointer_type_, user_id_column_type_
    {
      user_id_type_ (const char* t, const char* c, const char* conv)
        : user_id_column_type_ (t, c, conv)
      {
      }
    };

    static const user_id_type_ user_id;

    // image_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QDateTime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    image_date_type_;

    static const image_date_type_ image_date;

    // image_accepted
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    image_accepted_type_;

    static const image_accepted_type_ image_accepted;

    // image_longitude
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    image_longitude_type_;

    static const image_longitude_type_ image_longitude;

    // image_latitude
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        double,
        mysql::id_double >::query_type,
      mysql::id_double >
    image_latitude_type_;

    static const image_latitude_type_ image_latitude;

    // blob
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QByteArray,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    blob_type_;

    static const blob_type_ blob;
  };

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::image_id_type_
  query_columns< ::image, id_mysql, A >::
  image_id (A::table_name, "`image_id`", 0);

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::PATH_type_
  query_columns< ::image, id_mysql, A >::
  PATH (A::table_name, "`PATH`", 0);

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::event_id_type_
  query_columns< ::image, id_mysql, A >::
  event_id (A::table_name, "`event_id`", 0);

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::user_id_type_
  query_columns< ::image, id_mysql, A >::
  user_id (A::table_name, "`user_id`", 0);

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::image_date_type_
  query_columns< ::image, id_mysql, A >::
  image_date (A::table_name, "`image_date`", 0);

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::image_accepted_type_
  query_columns< ::image, id_mysql, A >::
  image_accepted (A::table_name, "`image_accepted`", 0);

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::image_longitude_type_
  query_columns< ::image, id_mysql, A >::
  image_longitude (A::table_name, "`image_longitude`", 0);

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::image_latitude_type_
  query_columns< ::image, id_mysql, A >::
  image_latitude (A::table_name, "`image_latitude`", 0);

  template <typename A>
  const typename query_columns< ::image, id_mysql, A >::blob_type_
  query_columns< ::image, id_mysql, A >::
  blob (A::table_name, "`blob`", 0);
}

#include "image-odb.ixx"

#include <odb/post.hxx>

#endif // IMAGE_ODB_HXX
