// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EVENT_ODB_HXX
#define EVENT_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/mysql/qstring-traits.hxx>
#include <odb/qt/basic/mysql/qbyte-array-traits.hxx>
#include <odb/qt/basic/mysql/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/mysql/qdate-traits.hxx>
#include <odb/qt/date-time/mysql/qtime-traits.hxx>
#include <odb/qt/date-time/mysql/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "event.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // odbevent
  //
  template <>
  struct class_traits< ::odbevent >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::odbevent >
  {
    public:
    typedef ::odbevent object_type;
    typedef ::QSharedPointer< ::odbevent > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // image_per_event
  //
  template <>
  struct class_traits< ::image_per_event >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::image_per_event >
  {
    public:
    typedef ::image_per_event view_type;
    typedef ::QSharedPointer< ::image_per_event > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // odbevent
  //
  template <typename A>
  struct pointer_query_columns< ::odbevent, id_mysql, A >
  {
    // event_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    event_id_type_;

    static const event_id_type_ event_id;

    // event_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    event_name_type_;

    static const event_name_type_ event_name;

    // submit_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QDateTime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    submit_date_type_;

    static const submit_date_type_ submit_date;

    // event_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QDateTime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    event_date_type_;

    static const event_date_type_ event_date;

    // event_accepted
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    event_accepted_type_;

    static const event_accepted_type_ event_accepted;

    // submitter_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    submitter_id_type_;

    static const submitter_id_type_ submitter_id;
  };

  template <typename A>
  const typename pointer_query_columns< ::odbevent, id_mysql, A >::event_id_type_
  pointer_query_columns< ::odbevent, id_mysql, A >::
  event_id (A::table_name, "`event_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::odbevent, id_mysql, A >::event_name_type_
  pointer_query_columns< ::odbevent, id_mysql, A >::
  event_name (A::table_name, "`event_name`", 0);

  template <typename A>
  const typename pointer_query_columns< ::odbevent, id_mysql, A >::submit_date_type_
  pointer_query_columns< ::odbevent, id_mysql, A >::
  submit_date (A::table_name, "`submit_date`", 0);

  template <typename A>
  const typename pointer_query_columns< ::odbevent, id_mysql, A >::event_date_type_
  pointer_query_columns< ::odbevent, id_mysql, A >::
  event_date (A::table_name, "`event_date`", 0);

  template <typename A>
  const typename pointer_query_columns< ::odbevent, id_mysql, A >::event_accepted_type_
  pointer_query_columns< ::odbevent, id_mysql, A >::
  event_accepted (A::table_name, "`event_accepted`", 0);

  template <typename A>
  const typename pointer_query_columns< ::odbevent, id_mysql, A >::submitter_id_type_
  pointer_query_columns< ::odbevent, id_mysql, A >::
  submitter_id (A::table_name, "`submitter_id`", 0);

  template <>
  class access::object_traits_impl< ::odbevent, id_mysql >:
    public access::object_traits< ::odbevent >
  {
    public:
    struct id_image_type
    {
      unsigned int id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // event_id
      //
      unsigned int event_id_value;
      my_bool event_id_null;

      // event_name
      //
      details::buffer event_name_value;
      unsigned long event_name_size;
      my_bool event_name_null;

      // submit_date
      //
      MYSQL_TIME submit_date_value;
      my_bool submit_date_null;

      // event_date
      //
      MYSQL_TIME event_date_value;
      my_bool event_date_null;

      // event_accepted
      //
      signed char event_accepted_value;
      my_bool event_accepted_null;

      // submitter_id
      //
      unsigned int submitter_id_value;
      my_bool submitter_id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // tracks_
    //
    struct tracks_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::QLazyWeakPointer< ::track > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< tracks_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned int value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // images_
    //
    struct images_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::QLazyWeakPointer< ::image > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< images_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned int value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    struct submitter_id_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::odbevent, id_common >:
    public access::object_traits_impl< ::odbevent, id_mysql >
  {
  };

  // image_per_event
  //
  template <>
  class access::view_traits_impl< ::image_per_event, id_mysql >:
    public access::view_traits< ::image_per_event >
  {
    public:
    struct image_type
    {
      // accepted
      //
      signed char accepted_value;
      my_bool accepted_null;

      // event_id
      //
      unsigned int event_id_value;
      my_bool event_id_null;

      // count
      //
      unsigned long long count_value;
      my_bool count_null;

      std::size_t version;
    };

    typedef mysql::view_statements<view_type> statements_type;

    typedef mysql::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::image_per_event, id_common >:
    public access::view_traits_impl< ::image_per_event, id_mysql >
  {
  };

  // odbevent
  //
  template <>
  struct alias_traits<
    ::user,
    id_mysql,
    access::object_traits_impl< ::odbevent, id_mysql >::submitter_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::odbevent, id_mysql >
  {
    // submitter_id
    //
    typedef
    odb::alias_traits<
      ::user,
      id_mysql,
      access::object_traits_impl< ::odbevent, id_mysql >::submitter_id_tag>
    submitter_id_alias_;
  };

  template <typename A>
  struct query_columns< ::odbevent, id_mysql, A >:
    query_columns_base< ::odbevent, id_mysql >
  {
    // event_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    event_id_type_;

    static const event_id_type_ event_id;

    // event_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    event_name_type_;

    static const event_name_type_ event_name;

    // submit_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QDateTime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    submit_date_type_;

    static const submit_date_type_ submit_date;

    // event_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::QDateTime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    event_date_type_;

    static const event_date_type_ event_date;

    // event_accepted
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    event_accepted_type_;

    static const event_accepted_type_ event_accepted;

    // submitter_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    submitter_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::user,
        id_mysql,
        submitter_id_alias_ > >
    submitter_id_pointer_type_;

    struct submitter_id_type_: submitter_id_pointer_type_, submitter_id_column_type_
    {
      submitter_id_type_ (const char* t, const char* c, const char* conv)
        : submitter_id_column_type_ (t, c, conv)
      {
      }
    };

    static const submitter_id_type_ submitter_id;
  };

  template <typename A>
  const typename query_columns< ::odbevent, id_mysql, A >::event_id_type_
  query_columns< ::odbevent, id_mysql, A >::
  event_id (A::table_name, "`event_id`", 0);

  template <typename A>
  const typename query_columns< ::odbevent, id_mysql, A >::event_name_type_
  query_columns< ::odbevent, id_mysql, A >::
  event_name (A::table_name, "`event_name`", 0);

  template <typename A>
  const typename query_columns< ::odbevent, id_mysql, A >::submit_date_type_
  query_columns< ::odbevent, id_mysql, A >::
  submit_date (A::table_name, "`submit_date`", 0);

  template <typename A>
  const typename query_columns< ::odbevent, id_mysql, A >::event_date_type_
  query_columns< ::odbevent, id_mysql, A >::
  event_date (A::table_name, "`event_date`", 0);

  template <typename A>
  const typename query_columns< ::odbevent, id_mysql, A >::event_accepted_type_
  query_columns< ::odbevent, id_mysql, A >::
  event_accepted (A::table_name, "`event_accepted`", 0);

  template <typename A>
  const typename query_columns< ::odbevent, id_mysql, A >::submitter_id_type_
  query_columns< ::odbevent, id_mysql, A >::
  submitter_id (A::table_name, "`submitter_id`", 0);

  // image_per_event
  //
  struct access::view_traits_impl< ::image_per_event, id_mysql >::query_columns
  {
    // odbevent
    //
    typedef
    odb::pointer_query_columns<
      ::odbevent,
      id_mysql,
      odb::access::object_traits_impl< ::odbevent, id_mysql > >
    odbevent;

    // image
    //
    typedef
    odb::pointer_query_columns<
      ::image,
      id_mysql,
      odb::access::object_traits_impl< ::image, id_mysql > >
    image;
  };
}

#include "event-odb.ixx"

#include <odb/post.hxx>

#endif // EVENT_ODB_HXX
